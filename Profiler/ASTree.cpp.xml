<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="ASTree.cpp"><comment type="block">/*
 *  ASTree.cpp
 *  Abstract Syntax Tree
 *
 *  Created by Jonathan Maletic on 11/8/11.
 *  Copyright 2012 Kent State University. All rights reserved.
 *
 t
 Modified by:
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ASTree.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name><name>srcML</name>::<name>profilesrcml</name></name><parameter_list>(<param><decl><type><name><name>std</name>::<name>string</name></name>&amp;</type> <name>files</name></decl></param>)</parameter_list><block>{

	<expr_stmt><expr><name>tree</name> -&gt; <call><name>profileHeaders</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tree</name> -&gt; <call><name>profileoutputs</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>
<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Destructor for srcML</comment>
<comment type="line">//</comment>
<macro><name>srcML</name></macro><expr_stmt><expr><name>::<name><name/></name></name>~<macro><name>srcML</name><argument_list>()</argument_list></macro> <block>{
    
   <if>if<condition>(<expr><name>tree</name></expr>)</condition><then><block>{ 
	<expr_stmt><expr>delete <name>tree</name></expr>;</expr_stmt>
   <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
    
}


<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Copy constructor for srcML</comment>
<comment type="line">//</comment>
<constructor><name><name>srcML</name>::<name>srcML</name></name><parameter_list>(<param><decl><type><name>const</name> <name>srcML</name>&amp;</type> <name>actual</name></decl></param>)</parameter_list> <block>{
    
    <expr_stmt><expr><name>header</name> = <name>actual</name>.<name>header</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tree</name> = <name>actual</name>.<name>tree</name> -&gt; <call><name>copyASTree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
}</block></constructor>

<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Constant time swap for srcML</comment>
<comment type="line">//</comment>
<function><type><name>void</name></type> <name><name>srcML</name>::<name>swap</name></name><parameter_list>(<param><decl><type><name>srcML</name>&amp;</type> <name>b</name></decl></param>)</parameter_list> <block>{
    
    <decl_stmt><decl><type><name><name>std</name>::<name>string</name></name></type> <name>Theader</name> =<init> <expr><name>header</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>header</name> = <name>b</name>.<name>header</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name>.<name>header</name> = <name>Theader</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ASTree</name> *</type><name>Ttree</name> =<init> <expr><name>tree</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>tree</name> = <name>b</name>.<name>tree</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name>.<name>tree</name> = <name>Ttree</name></expr>;</expr_stmt>
}</block></function>

<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Assignment for srcML</comment>
<comment type="line">//</comment>
<function><type><name>srcML</name>&amp;</type> <name><name>srcML</name>::<name>operator=</name></name><parameter_list>(<param><decl><type><name>srcML</name></type> <name>rhs</name></decl></param>)</parameter_list> <block>{
    
	<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr>*<name>this</name></expr>;</return>
}</block></function>

<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Reads in and constructs a srcML object.</comment>
<comment type="line">//</comment>
<function><type><name><name>std</name>::<name>istream</name></name>&amp;</type> <name>operator&gt;&gt;</name><parameter_list>(<param><decl><type><name><name>std</name>::<name>istream</name></name>&amp;</type> <name>in</name></decl></param>, <param><decl><type><name>srcML</name>&amp;</type> <name>src</name></decl></param>)</parameter_list><block>{
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>in</name>.<call><name>eof</name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>in</name> &gt;&gt; <name>ch</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>src</name>.<name>header</name> = <call><name>readUntil</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>in</name>.<call><name>eof</name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>in</name> &gt;&gt; <name>ch</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>src</name>.<name>tree</name> = new <call><name>ASTree</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><call><name>readUntil</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>src</name>.<name>tree</name>-&gt;<call><name>read</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>


<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Prints out a srcML object</comment>
<comment type="line">//</comment>
<function><type><name><name>std</name>::<name>ostream</name></name>&amp;</type> <name>operator&lt;&lt;</name><parameter_list>(<param><decl><type><name><name>std</name>::<name>ostream</name></name>&amp;</type> <name>out</name></decl></param>, <param><decl><type><name>const</name> <name>srcML</name>&amp;</type> <name>src</name></decl></param>)</parameter_list><block>{
    <if>if <condition>(<expr><name>TAGS</name></expr>)</condition><then> <expr_stmt><expr><name>out</name> &lt;&lt; "&lt;" &lt;&lt; <name>src</name>.<name>header</name> &lt;&lt; "&gt;" &lt;&lt; <name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>src</name>.<name>tree</name>-&gt;<call><name>print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name><name>ASTree</name>::<name>profileHeaders</name></name><parameter_list>(<param><decl><type><name><name>std</name>::<name>string</name></name>&amp;</type> <name>files</name></decl></param>)</parameter_list> <block>{

	<decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name>ASTree</name>*</argument>&gt;</argument_list></name>::<name>iterator</name></name></type> <name>i</name> =<init> <expr><name>child</name>.<call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for(<init>;</init><condition><expr><name>i</name> != <name>child</name>.<call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
		<if>if<condition>(<expr>(*<name>i</name>)-&gt;<name>nodeType</name>==<name>category</name></expr>)</condition><then> <block>{
			<if>if<condition>(<expr>(*<name>i</name>)-&gt;<name>tag</name> == "function" ||
			   (*<name>i</name>)-&gt;<name>tag</name> == "constructor" ||
			   (*<name>i</name>)-&gt;<name>tag</name> == "destructor"</expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>ASTree</name> *</type><name>nptr</name> =<init> <expr>new <call><name>ASTree</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>std</name>::<name>string</name></name></type> <name>temp</name> =<init> <expr>"profile " + <name>files</name> + ";\n"</expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>nptr</name> -&gt; <name>text</name> = "\n#include \"profile.h\"\nprofile functions;\n" + <name>temp</name> + "\n"</expr>;</expr_stmt>

				<expr_stmt><expr><name>i</name> = <name>child</name>.<call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></then></if></for>

}</block></function> 

<function><type><name>void</name></type> <name><name>ASTree</name>::<name>profileoutputs</name></name><parameter_list>(<param><decl><type><name><name>std</name>::<name>string</name></name>&amp;</type> <name>files</name></decl></param>)</parameter_list> <block>{

	<decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name>ASTree</name>*</argument>&gt;</argument_list></name>::<name>iterator</name></name></type> <name>i</name> =<init> <expr><name>child</name>.<call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for(<init>;</init><condition><expr><name>i</name> != <name>child</name>.<call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
		<if>if<condition>(<expr>(*<name>i</name>)-&gt;<name>nodeType</name> == <name>category</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr>(*<name>i</name>)-&gt;<name>tag</name> == "return"</expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>ASTree</name> *</type><name>nptr</name> =<init> <expr>new <call><name>ASTree</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>std</name>::<name>string</name></name></type> <name>temp</name> =<init> <expr>"\nstd::cout &lt;&lt; functions &lt;&lt; std::endl;\n"</expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>temp</name> += "std::cout &lt;&lt; " + <name>files</name> + " &lt;&lt;std::endl;\n\n"</expr>;</expr_stmt>

				<expr_stmt><expr><name>nptr</name> -&gt; <name>text</name> = <name>temp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name> = <name>child</name>.<call><name>insert</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>

			}</block></then>
			<else>else
				<expr_stmt><expr>(*<name>i</name>)-&gt;<call><name>profileoutputs</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></then></if>
	}</block></for>
}</block></function>
<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Destructor for ASTree</comment>
<comment type="line">//</comment>
<macro><name>ASTree</name></macro><expr_stmt><expr><name>::<name><name/></name></name>~<macro><name>ASTree</name><argument_list>()</argument_list></macro> <block>{
    
    <for>for(<init><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name>ASTree</name>*</argument>&gt;</argument_list></name>::<name>const_iterator</name></name></type> <name>i</name> =<init> <expr><name>child</name>.<call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> != <name>child</name>.<call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
		<expr_stmt><expr>delete *<name>i</name></expr>;</expr_stmt></for></block></expr></expr_stmt>

                                                                        
    
}


<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Constructs a category, token, or whitespace node for the tree.</comment>
<comment type="line">//</comment>
<constructor><name><name>ASTree</name>::<name>ASTree</name></name><parameter_list>(<param><decl><type><name>nodes</name></type> <name>t</name></decl></param>, <param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name>nodeType</name> = <name>t</name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>nodeType</name></expr>)</condition> <block>{
        <case>case <expr><name>category</name></expr>:
            <expr_stmt><expr><name>tag</name> = <name>s</name></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>token</name></expr>:
            <expr_stmt><expr><name>text</name> = <call><name>unEscape</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
		</case><case>case <expr><name>whitespace</name></expr>:
            <expr_stmt><expr><name>text</name> = <name>s</name></expr>;</expr_stmt>
            <break>break;</break>
    </case>}</block></switch>
}</block></constructor>


<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Copy Constructor for ASTree</comment>
<comment type="line">//</comment>
<macro><name>ASTree</name></macro><expr_stmt><expr><name>::<name>ASTree</name></name>(<name>const</name> <name>ASTree</name>&amp; <name>actual</name>) <block>{
    
    <switch>switch<condition>(<expr><name>actual</name>.<name>nodeType</name></expr>)</condition><block>{
		<case>case <expr><name>category</name></expr>:
			<expr_stmt><expr><name>tag</name> = <name>actual</name>.<name>tag</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>closeTag</name> = <name>actual</name>.<name>closeTag</name></expr>;</expr_stmt>
			<for>for(<init><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name>ASTree</name>*</argument>&gt;</argument_list></name>::<name>const_iterator</name></name></type> <name>i</name> =<init> <expr><name>actual</name>.<name>child</name>.<call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> != <name>actual</name>.<name>child</name>.<call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
				<expr_stmt><expr><name>child</name>.<call><name>push_back</name><argument_list>(<argument><expr>(*<name>i</name>) -&gt; <call><name>copyASTree</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
			<break>break;</break>
		</case><case>case <expr><name>token</name></expr>:
		</case><case>case <expr><name>whitespace</name></expr>:
			<expr_stmt><expr><name>text</name> = <name>actual</name>.<name>text</name></expr>;</expr_stmt>
			<break>break;</break>
	<expr_stmt/></case></block></switch>}</block></expr></expr_stmt>

}

<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Constant time swap for ASTree</comment>
<comment type="line">//</comment>
<function><type><name>void</name></type> <name><name>ASTree</name>::<name>swap</name></name><parameter_list>(<param><decl><type><name>ASTree</name>&amp;</type> <name>b</name></decl></param>)</parameter_list> <block>{
    
    <expr_stmt><expr><call><name><name>std</name>::<name>swap</name></name><argument_list>(<argument><expr><name>nodeType</name></expr></argument>, <argument><expr><name>b</name>.<name>nodeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name>::<name>swap</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>b</name>.<name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name>::<name>swap</name></name><argument_list>(<argument><expr><name>closeTag</name></expr></argument>, <argument><expr><name>b</name>.<name>closeTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name>::<name>swap</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>b</name>.<name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>child</name>.<call><name>swap</name><argument_list>(<argument><expr><name>b</name>.<name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Assignment for ASTree</comment>
<comment type="line">//</comment>
<function><type><name>ASTree</name>&amp;</type> <name><name>ASTree</name>::<name>operator=</name></name><parameter_list>(<param><decl><type><name>ASTree</name></type> <name>rhs</name></decl></param>)</parameter_list> <block>{
    
    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr>*<name>this</name></expr>;</return>                               
    
}</block></function>
                                                                                            
<function><type><name>ASTree</name>*</type> <name><name>ASTree</name>::<name>copyASTree</name></name><parameter_list>()</parameter_list><block>{
	
	<decl_stmt><decl><type><name>nodes</name></type> <name>tnode</name> =<init> <expr><name>nodeType</name></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>ASTree</name>*</type> <name>temp</name> =<init> <expr>new <call><name>ASTree</name><argument_list>(<argument><expr><name>tnode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>temp</name> -&gt; <name>tag</name> = <name>tag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>temp</name> -&gt; <name>closeTag</name> = <name>closeTag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>temp</name> -&gt; <name>text</name> = <name>text</name></expr>;</expr_stmt>

	<for>for(<init><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name>ASTree</name>*</argument>&gt;</argument_list></name>::<name>const_iterator</name></name></type> <name>i</name> =<init> <expr><name>child</name>.<call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> != <name>child</name>.<call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
		<expr_stmt><expr><name>temp</name> -&gt; <name>child</name>.<call><name>push_back</name><argument_list>(<argument><expr>(*<name>i</name>) -&gt; <call><name>copyASTree</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

	<return>return <expr><name>temp</name></expr>;</return>
}</block></function>


<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Read in and construct ASTree</comment>
<comment type="line">// REQUIRES: '&gt;' was previous charater read </comment>
<comment type="line">//           &amp;&amp; this == new ASTree(category, "TagName")</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>
<function><type><name><name>std</name>::<name>istream</name></name>&amp;</type> <name><name>ASTree</name>::<name>read</name></name><parameter_list>(<param><decl><type><name><name>std</name>::<name>istream</name></name>&amp;</type> <name>in</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ASTree</name> *</type><name>subtree</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name>::<name>string</name></name></type> <name>temp</name>, <name>Lws</name>, <name>Rws</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>in</name>.<call><name>eof</name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>in</name>.<call><name>get</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <while>while <condition>(<expr>!<name>in</name>.<call><name>eof</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>ch</name> == '&lt;'</expr>)</condition><then> <block>{                <comment type="line">//Found a tag </comment>
            <expr_stmt><expr><name>temp</name> = <call><name>readUntil</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>temp</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>closeTag</name> = <name>temp</name></expr>;</expr_stmt>
                <break>break;</break>                  <comment type="line">//Found close tag, stop recursion</comment>
            }</block></then></if>
            <expr_stmt><expr><name>subtree</name> = new <call><name>ASTree</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//New subtree</comment>
            <expr_stmt><expr><name>subtree</name>-&gt;<call><name>read</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="line">//Read it in</comment>
            <expr_stmt><expr><name>in</name>.<call><name>get</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>child</name>.<call><name>push_back</name><argument_list>(<argument><expr><name>subtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <comment type="line">//Add it to child</comment>
        }</block></then> <else>else <block>{                       <comment type="line">//Found a token</comment>
            <expr_stmt><expr><name>temp</name> = <call><name><name>std</name>::<name>string</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> + <call><name>readUntil</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>'&lt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//Read it in.</comment>
            <decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name><name>std</name>::<name>string</name></name></argument>&gt;</argument_list></name></name></type> <name>tokenList</name> =<init> <expr><call><name>tokenize</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name><name>std</name>::<name>string</name></name></argument>&gt;</argument_list></name>::<name>const_iterator</name></name></type> <name>i</name> =<init> <expr><name>tokenList</name>.<call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> != <name>tokenList</name>.<call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)<block>{
                <if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr>(*<name>i</name>)<index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><then> 
                    <expr_stmt><expr><name>subtree</name> = new <call><name>ASTree</name><argument_list>(<argument><expr><name>whitespace</name></expr></argument>, <argument><expr>*<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else
                    <expr_stmt><expr><name>subtree</name> = new <call><name>ASTree</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>*<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                <expr_stmt><expr><name>child</name>.<call><name>push_back</name><argument_list>(<argument><expr><name>subtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>ch</name> = '&lt;'</expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>


<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Print an ASTree </comment>
<comment type="line">// REQUIRES: indent &gt;= 0</comment>
<comment type="line">//</comment>
<function><type><name><name>std</name>::<name>ostream</name></name>&amp;</type> <name><name>ASTree</name>::<name>print</name></name><parameter_list>(<param><decl><type><name><name>std</name>::<name>ostream</name></name>&amp;</type> <name>out</name></decl></param>, <param><decl><type><name>int</name></type> <name>indent</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
    <if>if <condition>(<expr><name>TAGS</name></expr>)</condition><then> <expr_stmt><expr><name>out</name> &lt;&lt; <call><name><name>std</name>::<name>setw</name></name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call> &lt;&lt; " "</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>TAGS</name></expr>)</condition><then> <expr_stmt><expr><name>out</name> &lt;&lt; "&lt;" &lt;&lt; <name>tag</name> &lt;&lt; "&gt;" &lt;&lt; <name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt></then></if> 
    <for>for (<init><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name>ASTree</name>*</argument>&gt;</argument_list></name>::<name>const_iterator</name></name></type> <name>i</name> =<init> <expr><name>child</name>.<call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> != <name>child</name>.<call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <switch>switch <condition>(<expr>(*<name>i</name>)-&gt;<name>nodeType</name></expr>)</condition> <block>{
            <case>case <expr><name>category</name></expr>:
                <expr_stmt><expr>(*<name>i</name>)-&gt;<call><name>print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>indent</name> + 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>token</name></expr>:
                <comment type="line">//out &lt;&lt; std::setw(indent) &lt;&lt; " ";</comment>
                <expr_stmt><expr><name>out</name> &lt;&lt; (*<name>i</name>)-&gt;<name>text</name></expr>;</expr_stmt> <comment type="line">// &lt;&lt; std::endl;</comment>
                <break>break;</break>
            </case><case>case <expr><name>whitespace</name></expr>:
                <expr_stmt><expr><name>out</name> &lt;&lt; (*<name>i</name>)-&gt;<name>text</name></expr>;</expr_stmt>
                <break>break;</break>
        </case>}</block></switch>
    }</block></for>
    <if>if <condition>(<expr><name>TAGS</name></expr>)</condition><then> <expr_stmt><expr><name>out</name> &lt;&lt; <call><name><name>std</name>::<name>setw</name></name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call> &lt;&lt; " "</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>TAGS</name></expr>)</condition><then> <expr_stmt><expr><name>out</name> &lt;&lt; "&lt;" &lt;&lt; <name>closeTag</name> &lt;&lt; "&gt;" &lt;&lt; <name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt></then></if>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

    
    
    

<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Utilities</comment>
<comment type="line">//</comment>

<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Reads until a ch is encountered.  Does not include ch.</comment>
<comment type="line">// REQUIRES: in.open()</comment>
<comment type="line">// ENSURES: RetVal[i] != ch for all i.</comment>
<comment type="line">//</comment>
<function><type><name><name>std</name>::<name>string</name></name></type> <name>readUntil</name><parameter_list>(<param><decl><type><name><name>std</name>::<name>istream</name></name>&amp;</type> <name>in</name></decl></param>, <param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
	<decl_stmt><decl><type><name><name>std</name>::<name>string</name></name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>key</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>in</name>.<call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>!<name>in</name>.<call><name>eof</name><argument_list>()</argument_list></call> &amp;&amp; (<name>key</name> != <name>ch</name>)</expr>)</condition> <block>{
        <expr_stmt><expr><name>result</name> += <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>in</name>.<call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Converts escaped XML charaters back to charater form</comment>
<comment type="line">// REQUIRES: s == "&amp;lt;"</comment>
<comment type="line">// ENSURES:  RetVal == "&lt;"</comment>
<comment type="line">//</comment>
<function><type><name><name>std</name>::<name>string</name></name></type> <name>unEscape</name><parameter_list>(<param><decl><type><name><name>std</name>::<name>string</name></name></type> <name>s</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>pos</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr>(<name>pos</name> = <name>s</name>.<call><name>find</name><argument_list>(<argument><expr>"&amp;gt;"</expr></argument>)</argument_list></call>) != <name>s</name>.<name>npos</name></expr>)</condition>  <expr_stmt><expr><name>s</name>.<call><name>replace</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
    <while>while <condition>(<expr>(<name>pos</name> = <name>s</name>.<call><name>find</name><argument_list>(<argument><expr>"&amp;lt;"</expr></argument>)</argument_list></call>) != <name>s</name>.<name>npos</name></expr>)</condition>  <expr_stmt><expr><name>s</name>.<call><name>replace</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"&lt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
    <while>while <condition>(<expr>(<name>pos</name> = <name>s</name>.<call><name>find</name><argument_list>(<argument><expr>"&amp;amp;"</expr></argument>)</argument_list></call>) != <name>s</name>.<name>npos</name></expr>)</condition> <expr_stmt><expr><name>s</name>.<call><name>replace</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>"&amp;"</expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
    <return>return <expr><name>s</name></expr>;</return>
}</block></function>


<comment type="line">/////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Given: s == "   a + c  "</comment>
<comment type="line">// RetVal == {"   ", "a", " ", "+", "c", " "}  </comment>
<comment type="line">//</comment>
<function><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name><name>std</name>::<name>string</name></name></argument>&gt;</argument_list></name></name></type> <name>tokenize</name><parameter_list>(<param><decl><type><name>const</name> <name><name>std</name>::<name>string</name></name>&amp;</type> <name>s</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><name><name>std</name>::<name>string</name></name></argument>&gt;</argument_list></name></name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name>::<name>string</name></name></type>              <name>temp</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> &lt; <name>s</name>.<call><name>length</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp; (<name>i</name> &lt; <name>s</name>.<call><name>length</name><argument_list>()</argument_list></call>)</expr>)</condition> <block>{
            <expr_stmt><expr><name>temp</name>.<call><name>push_back</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>temp</name> != ""</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name>.<call><name>push_back</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>temp</name> = ""</expr>;</expr_stmt>
        }</block></then></if>
        <while>while <condition>(<expr>!<call><name>isspace</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp; (<name>i</name> &lt; <name>s</name>.<call><name>length</name><argument_list>()</argument_list></call>)</expr>)</condition> <block>{
            <expr_stmt><expr><name>temp</name>.<call><name>push_back</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>temp</name> != ""</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name>.<call><name>push_back</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>temp</name> = ""</expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
    

</unit>
